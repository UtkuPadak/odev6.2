# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestPricelowtohighcheck():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_pricelowtohighcheck(self):
    self.driver.get("https://www.saucedemo.com/")
    self.driver.set_window_size(1080, 1032)
    WebDriverWait(self.driver, 3).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"username\"]")))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"username\"]").send_keys("standard_user")
    WebDriverWait(self.driver, 3).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"password\"]")))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"password\"]").send_keys("secret_sauce")
    WebDriverWait(self.driver, 3).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"login-button\"]")))
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"login-button\"]").click()
    WebDriverWait(self.driver, 3).until(expected_conditions.visibility_of_element_located((By.CSS_SELECTOR, "*[data-test=\"product_sort_container\"]")))
    dropdown = self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"product_sort_container\"]")
    dropdown.find_element(By.XPATH, "//option[. = 'Price (low to high)']").click()
    self.driver.find_element(By.CSS_SELECTOR, "*[data-test=\"product_sort_container\"]").click()
    product_quantity = self.driver.find_elements(By.CLASS_NAME,"inventory_list")
    price_text1 = self.driver.find_element(By.CSS_SELECTOR, ".inventory_item:nth-child(1) .inventory_item_price").text
    price_text2 = self.driver.find_element(By.CSS_SELECTOR, ".inventory_item:nth-child(2) .inventory_item_price").text
    price_text3 = self.driver.find_element(By.CSS_SELECTOR, ".inventory_item:nth-child(3) .inventory_item_price").text
    price_text4 = self.driver.find_element(By.CSS_SELECTOR, ".inventory_item:nth-child(4) .inventory_item_price").text
    price_text5 = self.driver.find_element(By.CSS_SELECTOR, ".inventory_item:nth-child(5) .inventory_item_price").text
    price_text6 = self.driver.find_element(By.CSS_SELECTOR, ".inventory_item:nth-child(6) .inventory_item_price").text
    price_list = []
    for i in range((len(product_quantity))+1):
      price_list.append("price_text{}".format(i))
    price_list_change_status = price_list.sort()
    assert price_list_change_status==None
